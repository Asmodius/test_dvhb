>Python/Asyncio + PostgreSQL
>
>Реализовать бекенд работающий на Asyncio и PostgreSQL с REST-интерфейсом.
>
>Бекенд должен предоставлять возможность работы с древовидной структурой,
>которую надо правильно уложить в PostgreSQL.
>
>Каждый элемент дерева должен иметь обязательное поле text, по которому
>осуществляется полнотекстовый поиск.
>
>Основные требования:
>* Авторизация пользователя по уже существующему логину и паролю, дальнейшее
>  взаимодействие с api возможно только при авторизации
>* Метод для вставки нового элемента
>* Метод для полнотекстового поиска с выдачей пути до корневого элемента
>* Метод для извлечения поддерева по id элемента
>* В качестве gui для методов должен быть использован swagger-ui
>
>Ответ на все методы должен быть json.
>
>С результатом теста указать затраченное время. Реализовывать всю
>функциональность не требуется, её объём на твоё усмотрение. Но желательно
>описать, в случае неполной реализации, недостающие компоненты системы
>примерным решением. Рекомендуемое время — 4 часа.

Чтобы самому не реализовывать весь http-протокол для REST, использовал Tornado
c "Event Loop" от asyncio.
Доступ к PostgreSQL через aiopg (он тоже работает через asyncio).
Аутентификация с момощью "Basic Authorization". Логин/пароль - test/test.
Дерево хранится в таблице "node" со структурой:
 id serial PRIMARY KEY,
 text varchar(255),
 path varchar(255)
где:
id - номер узла
text - текст узла
path - путь к узлу в дереве вида .1.3.5
В задании не было оговорено какая может быть глубина дерева. С данной
структурой максимальная глубина <89.

GET - возвращает список узлов поддерева
POST - вставляет новый узел
DELETE - удаляет узел и его детей

В задании не было сказано про тесты, но я взял на себя смелость их написать.
Без тестов довольно трудно отлаживать.

Задание заняло около 8 часов. Из них около 2 часов разбирался со Swagger - мне
не приходилось раньше с ним иметь дело, а у его онлайн редактора довольно
невнятные сообщения об ошибках.
